from pyvis.network import Network

letters26 = ['J', 'F', 'Q', 'E', 'D', 'K', 'Y', 'B', 'T', 'G', 'L', 'X', 'H', 'W', 'M', 'V', 'A', 'I', 'O', 'S', 'R', 'Z', 'P', 'U', 'C', 'N']
instances26 = [151178676, 134797090, 93434890, 89649611, 86881487, 85241089, 84176869, 77945282, 72967114, 72653055, 65228869, 64992055, 59983200, 56475946, 51451209, 44662601, 43624502, 43068327, 42164282, 41901303, 35904463, 34336779, 31900805, 27157360, 23742064, 22055480]
bigrams = ['QT', 'DJ', 'BF', 'FQ', 'FK', 'QR', 'EJ', 'FS', 'EK', 'JK', 'KL', 'DF', 'FJ', 'GJ', 'DE', 'JM', 'TY', 'KY', 'FW', 'BJ', 'DK', 'GH', 'EG', 'FF', 'JW', 'JL', 'DM', 'BG', 'JJ', 'DG', 'JX', 'JY', 'JR', 'AO', 'GY', 'BZ', 'LM', 'OV', 'JV', 'EL', 'DY', 'AV', 'HY', 'JQ', 'LT', 'JS', 'FY', 'IV', 'BX', 'HQ', 'KQ', 'WW', 'XY', 'BH', 'JP', 'CJ', 'FX', 'GX', 'JT', 'LY', 'EY', 'FG', 'YY', 'HJ', 'ER', 'KX', 'EH', 'SY', 'BL', 'FP', 'DX', 'FH', 'BM', 'HX', 'GL', 'WY', 'FR', 'EX', 'HT', 'LQ', 'MX', 'IO', 'GS', 'BQ', 'EQ', 'EP', 'DH', 'DD', 'HW', 'BY', 'DS', 'QX', 'KZ', 'JO', 'MQ', 'QY', 'EF', 'CX', 'DZ', 'AI', 'OS', 'KW', 'GT', 'XX', 'FT', 'BW', 'GZ', 'EE', 'BC', 'LX', 'OO', 'FN', 'BE', 'AU', 'YZ', 'SW', 'AA', 'DL', 'FZ', 'KT', 'BK', 'QQ', 'IU', 'WX', 'MW', 'PQ', 'AF', 'LR', 'IQ', 'HI', 'LW', 'MY', 'CQ', 'JZ', 'UV', 'FL', 'HM', 'IJ', 'TW', 'RY', 'HL', 'DT', 'IY', 'BT', 'GW', 'BD', 'NR', 'II', 'QW', 'CH', 'OU', 'FU', 'MN', 'MZ', 'NQ', 'DR', 'XZ', 'HK', 'LL', 'VV', 'KP', 'PY', 'FO', 'GQ', 'DW', 'GM', 'BP', 'JU', 'AG', 'FV', 'EV', 'LS', 'HN', 'EO', 'AJ', 'EW', 'ET', 'EI', 'PW', 'CE', 'GO', 'FM', 'EN', 'GK', 'MV', 'AZ', 'JN', 'TX', 'SX', 'AX', 'DQ', 'BB', 'LO', 'IP', 'EU', 'CY', 'KS', 'AE', 'HP', 'KV', 'KU', 'HH', 'RX', 'IL', 'AK', 'DU', 'RW', 'FI', 'LN', 'VY', 'ST', 'DV', 'MT', 'LV', 'KO', 'HU', 'HZ', 'LP', 'EM', 'VX', 'ES', 'IX', 'MM', 'OX', 'IW', 'PT', 'RZ', 'BR', 'IK', 'NX', 'AW', 'DP', 'KM', 'DN', 'IT', 'AD', 'TZ', 'BI', 'SZ', 'CT', 'NW', 'AQ', 'GI', 'CL', 'BS', 'TT', 'EZ', 'AB', 'OP', 'UX', 'CW', 'RV', 'GN', 'CI', 'LU', 'MS', 'QV', 'GP', 'GR', 'DI', 'CK', 'PX', 'LZ', 'GG', 'ZZ', 'BN', 'NY', 'HO', 'CF', 'AY', 'RT', 'UU', 'BO', 'QU', 'AL', 'GV', 'AN', 'AS', 'VW', 'OY', 'QZ', 'CD', 'UY', 'BV', 'IZ', 'MR', 'UW', 'CZ', 'HV', 'OW', 'KN', 'WZ', 'SV', 'MO', 'DO', 'TV', 'MP', 'IM', 'CP', 'PZ', 'HR', 'OT', 'QS', 'BU', 'OQ', 'CM', 'PR', 'HS', 'IS', 'VZ', 'IR', 'TU', 'NT', 'CN', 'AT', 'AM', 'GU', 'KK', 'KR', 'AH', 'SU', 'UZ', 'NV', 'NP', 'MU', 'AP', 'PP', 'PV', 'AR', 'SS', 'RU', 'NS', 'RS', 'CR', 'CU', 'OZ', 'OR', 'PU', 'CV', 'CO', 'CG', 'NO', 'NZ', 'PS', 'IN', 'RR', 'CS', 'AC', 'NU', 'CC', 'NN']
bigram_frequencies = [30321879, 25774077, 23452897, 19741958, 19102581, 16675758, 16467677, 16403655, 15703711, 15416194, 15062355, 14456717, 13378854, 13188806, 13132278, 12559078, 12443850, 12292492, 11471010, 11220159, 11052129, 10965741, 10445119, 9979039, 9660945, 9455209, 9359716, 9298070, 9230949, 9014559, 8737145, 8705695, 8285298, 8280256, 8206733, 8203932, 8194371, 7894030, 7889369, 7816205, 7737784, 7598916, 7548494, 7449201, 7420775, 7332451, 7209697, 7119718, 7065085, 6786994, 6463612, 6443533, 6289957, 6261726, 6210029, 6183853, 6123882, 6066530, 6054965, 5972399, 5944228, 5931379, 5840846, 5775985, 5756223, 5701338, 5636741, 5595293, 5542592, 5461965, 5443755, 5433472, 5430306, 5405356, 5381727, 5242779, 5225305, 5203768, 5163875, 5120708, 5098136, 5041572, 4901493, 4787088, 4773214, 4718639, 4672557, 4623068, 4616176, 4499754, 4494950, 4490194, 4455918, 4447507, 4433430, 4426900, 4318302, 4227837, 4196236, 4129713, 4067588, 4049812, 4024935, 3989124, 3987273, 3982645, 3965950, 3941715, 3841874, 3835163, 3812852, 3781678, 3774022, 3700980, 3662301, 3618523, 3612460, 3610078, 3567580, 3520276, 3519357, 3517557, 3445059, 3419674, 3401362, 3380038, 3292910, 3240316, 3208168, 3196804, 3180777, 3154561, 3144533, 3128617, 3120567, 3082966, 3022414, 3001242, 3000222, 2977892, 2957093, 2955856, 2950121, 2925966, 2899724, 2880674, 2877908, 2874944, 2826540, 2792320, 2771633, 2727502, 2707538, 2697431, 2691007, 2657153, 2632063, 2631566, 2595160, 2592827, 2582538, 2548053, 2473850, 2446837, 2421015, 2391147, 2377731, 2351266, 2349306, 2327433, 2326350, 2320465, 2290284, 2288332, 2280137, 2264958, 2258065, 2247870, 2234222, 2205803, 2162534, 2161006, 2150978, 2107772, 2105598, 2077514, 2053265, 2051688, 2048525, 2022787, 1954007, 1930158, 1923054, 1900382, 1856724, 1839065, 1837315, 1834557, 1832809, 1818875, 1818190, 1814723, 1793583, 1758672, 1741040, 1725047, 1724195, 1703168, 1698895, 1695506, 1691234, 1666274, 1654424, 1641075, 1628558, 1610084, 1608250, 1606166, 1598664, 1589551, 1588089, 1586168, 1553125, 1541674, 1541201, 1517884, 1514181, 1506106, 1494622, 1487696, 1468218, 1467614, 1461986, 1461624, 1424584, 1409608, 1393474, 1393244, 1382402, 1369041, 1365968, 1361597, 1349406, 1336857, 1334643, 1327489, 1327479, 1319054, 1277093, 1269721, 1229375, 1210794, 1210622, 1209810, 1200610, 1192843, 1190556, 1186205, 1168411, 1136667, 1111911, 1098344, 1096132, 1089913, 1081254, 1067937, 1062847, 1062414, 1062070, 1053867, 1032232, 1012664, 1009788, 992812, 984624, 983411, 979043, 967720, 920497, 908927, 904627, 891407, 888816, 881979, 880307, 870331, 831614, 808656, 797206, 779094, 775623, 774858, 770004, 748462, 747090, 720886, 702242, 693283, 686703, 685888, 673696, 672600, 663759, 642859, 636787, 606246, 593353, 586705, 567251, 551500, 543383, 535751, 526867, 516317, 509681, 506800, 501174, 475671, 475188, 472675, 454923, 444314, 430505, 419719, 409839, 409153, 407333, 403204, 400457, 382205, 377676, 365989, 364112, 361725, 351274, 325234, 309318, 293069, 290497, 280878, 264706, 243360, 209546, 207148, 155967, 146105, 127084, 119684, 115864, 110813, 96663]
net = Network()

# Add nodes and edges for 1-gram
cnt = 0
for (letter, frequency) in zip(letters26, instances26):
    cnt += 1
    net.add_node(letter, label=f"{letter}", value=frequency)

cnt = 0
MAX_CNT = 50
for (two_gram, weight) in zip(bigrams, bigram_frequencies):
    letter1, letter2 = two_gram
    net.add_edge(letter1,letter2, value=weight)
    cnt += 1
    if cnt >= MAX_CNT:
        break


net.barnes_hut(True)
# Show the interactive network graph in Jupyter Notebook
net.toggle_physics(True)
net.show_buttons(filter_=['physics'])
net.show("network_graph.html")
